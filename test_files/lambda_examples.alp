module lambda_examples

export map_lambda, no_sugar_internal_binding, no_sugar_top_binding
export map_to_make_t, nested_fun, use_lambda
export use_literal_fun_with_patterns, literal_fun_and_guards
export fun_in_record, fun_in_record_in_record

let map f [] = []
let map f (h :: t) = (f h) :: (map f t)

-- Use a literal lambda/anonymous function:
let map_lambda () = map (fn x -> x + 1) [1, 2, 3]

-- Skip function binding syntax sugar for internal functions.
let no_sugar_internal_binding () =
  let f = fn x -> x + 1 in
  f 2

-- Skip the syntax sugar for function bindings at the top level.
let no_sugar_top_binding = fn x -> x + 1

type t 'a = T 'a

let map_to_make_t list =
  T (map (fn x -> x + 1) list)

let nested_fun () =
    map (fn x -> (fn y -> y + 1) x) [1, 2, 3]

let use_lambda = λ x → x + 1

let use_literal_fun_with_patterns () =
  map (fn | 0 -> :zero | _ -> :not_zero) [0, 1, 0, 2]

type int_and_float = int | float

let literal_fun_and_guards () =
  let f =
    fn
      | x, is_integer x -> :int
      | _               -> :not_int
  in map f [1, 1.0, 2, 2.0]

let fun_in_record () =
  let r = {f=fn x -> x + x} in
  match r with
  | {f=f} -> f 2

let fun_in_record_in_record () =
  let r = {x=1, r={f=fn x -> x + 1}} in
  apply_nested_rec_fun r 2

let apply_nested_rec_fun r x =
  match r with
  | {r={f=f}} -> f x